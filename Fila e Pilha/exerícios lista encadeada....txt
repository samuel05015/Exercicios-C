Exercício 1 - Lista Encadeada
c
Copiar
Editar
#include <stdio.h>     // Biblioteca padrão de entrada e saída
#include <stdlib.h>    // Biblioteca utilizada para funções de alocação dinâmica

typedef struct no {
    int valor;            // Valor armazenado no nó
    struct no* proximo;    // Ponteiro para o próximo nó
} No;

void inserir_inicio(No** inicio, int valor) {
    No* novo = (No*) malloc(sizeof(No));   // Aloca memória para o novo nó
    novo->valor = valor;                   // Atribui o valor ao novo nó
    novo->proximo = *inicio;                // Faz o novo nó apontar para o nó atual
    *inicio = novo;                         // Atualiza o início para o novo nó
}

void imprimir_lista(No* inicio) {
    No* atual = inicio;                    // Começa pelo primeiro nó
    while (atual != NULL) {                 // Enquanto não chegar ao fim
        printf("%d -> ", atual->valor);     // Imprime o valor
        atual = atual->proximo;             // Avança para o próximo nó
    }
    printf("NULL\n");                       // Fim da lista
}

int main() {
    No* lista = NULL;                       // Inicializa a lista como vazia
    
    inserir_inicio(&lista, 10);
    inserir_inicio(&lista, 20);
    inserir_inicio(&lista, 30);
    inserir_inicio(&lista, 40);

    imprimir_lista(lista);                  // Exibe a lista encadeada
    
    return 0;
}
Exercício 2 - Vetor Estático
c
Copiar
Editar
#include <stdio.h>

int main() {
    int vetor[5];         // Declara um vetor para 5 inteiros
    int i;                // Variável de controle do loop

    vetor[0] = 10;         // Armazena o número de elementos guardados
    vetor[1] = 20;         // Insere 20 na posição 1
    vetor[2] = 30;         // Insere 30 na posição 2

    printf("Vetor não ordenado (Array Estático):\n"); // Exibe mensagem antes de mostrar o vetor

    for (i = 0; i < 3; i++) {    // Percorre os elementos inseridos
        printf("Posição %d: %d\n", i, vetor[i]);    // Exibe a posição e o valor armazenado
    }

    return 0;   // Encerra o programa
}
Exercício 3 - Vetor Dinâmico
c
Copiar
Editar
#include <stdio.h>     // Biblioteca padrão de entrada e saída
#include <stdlib.h>    // Biblioteca para alocação dinâmica de memória

int main() {
    int* vetor;            // Declara um ponteiro para inteiro
    int n = 0;              // Número de elementos atualmente no vetor
    int tamanho = 5;        // Tamanho máximo inicial para o vetor

    vetor = malloc(tamanho * sizeof(int));   // Aloca memória para 5 inteiros

    vetor[n++] = 15;       // Insere 15 na posição 0
    vetor[n++] = 25;       // Insere 25 na posição 1
    vetor[n++] = 35;       // Insere 35 na posição 2

    printf("Vetor não ordenado (Array Dinâmico):\n"); // Mensagem inicial

    for (int i = 0; i < n; i++) { // Percorre os elementos inseridos
        printf("Posição %d: %d\n", i, vetor[i]); // Exibe a posição e o valor
    }

    free(vetor);    // Libera a memória alocada dinamicamente

    return 0;       // Finaliza o programa
}